import telebot
from binance.client import Client
import pandas as pd
import numpy as np
import ta
import os
import schedule
import time
import threading

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# Binance –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
client = Client()

# –¢–≤–æ–π chat_id
USER_CHAT_ID = 1217715528  

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
PAIRS = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "XRPUSDT", "ADAUSDT", "DOGEUSDT", "SOLUSDT", "DOTUSDT", "MATICUSDT"]
TIMEFRAMES = {"15m": "15m", "1h": "1h", "4h": "4h", "1d": "1d"}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_settings = {"pair": None, "timeframe": None}


# ========= –§–£–ù–ö–¶–ò–ò =========
def fetch_klines(symbol, interval, limit=200):
    """–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Å Binance"""
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
        df = pd.DataFrame(klines, columns=[
            "timestamp", "open", "high", "low", "close", "volume",
            "close_time", "quote_av", "trades", "tb_base_av", "tb_quote_av", "ignore"
        ])
        df["close"] = df["close"].astype(float)
        df["open"] = df["open"].astype(float)
        df["high"] = df["high"].astype(float)
        df["low"] = df["low"].astype(float)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def advanced_analysis(df):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Å–∏–≥–Ω–∞–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —à—É–º–æ–≤"""
    df["ema20"] = ta.trend.EMAIndicator(df["close"], window=20).ema_indicator()
    df["ema50"] = ta.trend.EMAIndicator(df["close"], window=50).ema_indicator()
    df["ema200"] = ta.trend.EMAIndicator(df["close"], window=200).ema_indicator()
    df["rsi"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()
    macd = ta.trend.MACD(df["close"])
    df["macd"] = macd.macd()
    df["signal"] = macd.macd_signal()

    latest = df.iloc[-1]
    price = latest["close"]

    text = (
        f"üìä {user_settings['pair']} ({user_settings['timeframe']})\n"
        f"–¶–µ–Ω–∞: {price:.4f}\n\n"
        f"EMA20: {latest['ema20']:.4f} | EMA50: {latest['ema50']:.4f} | EMA200: {latest['ema200']:.4f}\n"
        f"RSI: {latest['rsi']:.2f} | MACD: {latest['macd']:.4f} | Signal: {latest['signal']:.4f}\n"
    )

    # ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====
    if latest["rsi"] < 30 and latest["ema20"] > latest["ema50"] > latest["ema200"] and latest["macd"] > latest["signal"]:
        signal = "‚úÖ BUY (—Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)"
    elif latest["rsi"] > 70 and latest["ema20"] < latest["ema50"] < latest["ema200"] and latest["macd"] < latest["signal"]:
        signal = "‚ùå SELL (—Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)"
    else:
        signal = "‚öñÔ∏è HOLD (—Å–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç)"

    text += f"\n‚û°Ô∏è –°–∏–≥–Ω–∞–ª: {signal}"
    return signal, text


def check_signals():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    pair = user_settings["pair"]
    timeframe = user_settings["timeframe"]

    if not pair or not timeframe:
        return

    df = fetch_klines(pair, timeframe)
    if df is not None:
        signal, text = advanced_analysis(df)
        if "BUY" in signal or "SELL" in signal:
            bot.send_message(USER_CHAT_ID, text)


def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(5)


# ========= TELEGRAM –ò–ù–¢–ï–†–§–ï–ô–° =========
@bot.message_handler(commands=["start"])
def start(message):
    if message.chat.id != USER_CHAT_ID:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    bot.send_message(message.chat.id, "üëã –ú–∏—Ä –≤–∞–º –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=pair_keyboard())


def pair_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for pair in PAIRS:
        keyboard.add(pair)
    return keyboard


def timeframe_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for tf in TIMEFRAMES.keys():
        keyboard.add(tf)
    keyboard.add("üîÑ –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É")
    return keyboard


@bot.message_handler(func=lambda message: message.text in PAIRS)
def set_pair(message):
    if message.chat.id != USER_CHAT_ID:
        return

    user_settings["pair"] = message.text
    bot.send_message(message.chat.id, f"–ü–∞—Ä–∞ {message.text} –≤—ã–±—Ä–∞–Ω–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=timeframe_keyboard())


@bot.message_handler(func=lambda message: message.text in TIMEFRAMES.keys())
def set_timeframe(message):
    if message.chat.id != USER_CHAT_ID:
        return

    user_settings["timeframe"] = message.text
    bot.send_message(message.chat.id, f"–¢–∞–π–º—Ñ—Ä–µ–π–º {message.text} –≤—ã–±—Ä–∞–Ω ‚úÖ\n–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ {user_settings['pair']} [{user_settings['timeframe']}]")

    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
    df = fetch_klines(user_settings["pair"], user_settings["timeframe"])
    if df is not None:
        signal, text = advanced_analysis(df)
        bot.send_message(USER_CHAT_ID, text)
    else:
        bot.send_message(USER_CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    schedule.clear()
    if message.text == "15m":
        schedule.every(15).minutes.do(check_signals)
    elif message.text == "1h":
        schedule.every().hour.do(check_signals)
    elif message.text == "4h":
        schedule.every(4).hours.do(check_signals)
    elif message.text == "1d":
        schedule.every().day.do(check_signals)


@bot.message_handler(func=lambda message: message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É")
def change_pair(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=pair_keyboard())


# ========= –ó–ê–ü–£–°–ö =========
threading.Thread(target=run_schedule, daemon=True).start()
bot.polling(non_stop=True)

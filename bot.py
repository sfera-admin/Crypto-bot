# bot.py
import os
import logging
import asyncio
import pandas as pd
import numpy as np
import ccxt
import ta

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
# BINANCE –∫–ª—é—á–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, ccxt –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY", None)
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET", None)

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN env var is missing")

# ---------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BINANCE (ccxt) ----------
binance = ccxt.binance({
    "enableRateLimit": True,
    **({"apiKey": BINANCE_API_KEY, "secret": BINANCE_API_SECRET} if BINANCE_API_KEY else {})
})

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä –∏ TF ----------
PAIRS = ["BTC/USDT", "ETH/USDT", "XRP/USDT", "MATIC/USDT", "ADA/USDT", "DOGE/USDT", "SOL/USDT", "TRX/USDT", "SUI/USDT"]
TIMEFRAMES = ["15m", "30m", "1h", "4h", "1d"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_settings = {}  # {chat_id: {"pair": "BTC/USDT", "tf":"1h"}}


# ---------- –£—Ç–∏–ª–∏—Ç—ã: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ----------
def fetch_ohlcv(symbol: str, timeframe: str, limit: int = 200):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ time, open, high, low, close, volume
    symbol –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTC/USDT'
    """
    # ccxt —Ç—Ä–µ–±—É–µ—Ç —Å–∏–º–≤–æ–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: 'BTC/USDT'
    ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=["time", "open", "high", "low", "close", "volume"])
    df["close"] = df["close"].astype(float)
    df["volume"] = df["volume"].astype(float)
    return df


def calculate_indicators(df: pd.DataFrame):
    # EMA20, EMA50, EMA200
    df["EMA20"] = df["close"].ewm(span=20, adjust=False).mean()
    df["EMA50"] = df["close"].ewm(span=50, adjust=False).mean()
    df["EMA200"] = df["close"].ewm(span=200, adjust=False).mean()

    # RSI 14
    delta = df["close"].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(14).mean()
    avg_loss = loss.rolling(14).mean()
    rs = avg_gain / avg_loss
    df["RSI"] = 100 - (100 / (1 + rs))

    # MACD (EMA12 - EMA26) and signal
    ema12 = df["close"].ewm(span=12, adjust=False).mean()
    ema26 = df["close"].ewm(span=26, adjust=False).mean()
    df["MACD"] = ema12 - ema26
    df["MACD_SIGNAL"] = df["MACD"].ewm(span=9, adjust=False).mean()

    return df


def decide_signal(df: pd.DataFrame):
    last = df.iloc[-1]
    ema20 = last["EMA20"]
    ema50 = last["EMA50"]
    rsi = last["RSI"]
    macd = last["MACD"]
    macd_signal = last["MACD_SIGNAL"]

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å/—É–ª—É—á—à–∞—Ç—å
    if ema20 > ema50 and rsi > 55 and macd > macd_signal:
        return "‚úÖ BUY"
    if ema20 < ema50 and rsi < 45 and macd < macd_signal:
        return "‚ùå SELL"
    return "‚è∏ HOLD"


# ---------- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ----------
def keyboard_pairs():
    keys = [[p] for p in PAIRS]
    return ReplyKeyboardMarkup(keys, one_time_keyboard=True, resize_keyboard=True)


def keyboard_timeframes():
    keys = [[t] for t in TIMEFRAMES]
    return ReplyKeyboardMarkup(keys, one_time_keyboard=True, resize_keyboard=True)


def keyboard_after_signal():
    return ReplyKeyboardMarkup([["üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª", "üìå –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É"]], resize_keyboard=True)


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_settings[chat_id] = {"pair": None, "tf": None}
    await update.message.reply_text("–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=keyboard_pairs())


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º –≤—ã–±–æ—Ä –ø–∞—Ä—ã, –∑–∞—Ç–µ–º –≤—ã–±–æ—Ä TF,
    —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã –ø–∞—Ä—ã.
    """
    chat_id = update.effective_chat.id
    text = (update.message.text or "").strip()

    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        await refresh_signal(update, context)
        return
    if text == "üìå –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É":
        user_settings[chat_id] = {"pair": None, "tf": None}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=keyboard_pairs())
        return

    # –ï—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –ø–∞—Ä–∞
    settings = user_settings.get(chat_id, {"pair": None, "tf": None})
    if not settings.get("pair"):
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–≤–æ–¥—ã –≤ –≤–∏–¥–µ "BTCUSDT" –∏–ª–∏ "BTC/USDT"
        candidate = text.upper().replace(" ", "")
        if "/" not in candidate and len(candidate) >= 6:
            # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç ccxt 'BTC/USDT'
            if candidate.endswith("USDT"):
                candidate = candidate[:-4] + "/USDT"
        if candidate not in PAIRS:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=keyboard_pairs())
            return
        # —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–∞—Ä—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –¢–§
        user_settings[chat_id]["pair"] = candidate
        await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞: {candidate}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=keyboard_timeframes())
        return

    # –ï—Å–ª–∏ –ø–∞—Ä–∞ –µ—Å—Ç—å, –Ω–æ tf –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –∫–∞–∫ TF
    if settings.get("pair") and not settings.get("tf"):
        tf = text
        if tf not in TIMEFRAMES:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=keyboard_timeframes())
            return
        user_settings[chat_id]["tf"] = tf
        await update.message.reply_text(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {settings['pair']} ({tf}) ...", reply_markup=ReplyKeyboardRemove())
        await send_signal_for_user(chat_id, update, context)
        return

    # –ï—Å–ª–∏ –ø–∞—Ä–∞ –∏ tf —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –≤–≤–µ–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    await update.message.reply_text("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª –∏–ª–∏ ¬´üìå –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É¬ª.",
                                    reply_markup=keyboard_after_signal())


async def send_signal_for_user(chat_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE):
    settings = user_settings.get(chat_id)
    if not settings or not settings.get("pair") or not settings.get("tf"):
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º —á–µ—Ä–µ–∑ /start", reply_markup=keyboard_pairs())
        return

    pair = settings["pair"]
    tf = settings["tf"]

    try:
        df = fetch_ohlcv(pair, tf, limit=200)
        df = calculate_indicators(df)
        signal = decide_signal(df)
        last_price = df["close"].iloc[-1]

        text = (
            f"üìä {pair} ({tf})\n"
            f"–¶–µ–Ω–∞: {last_price:.4f}\n\n"
            f"EMA20: {df['EMA20'].iloc[-1]:.4f} | EMA50: {df['EMA50'].iloc[-1]:.4f} | EMA200: {df['EMA200'].iloc[-1]:.4f}\n"
            f"RSI: {df['RSI'].iloc[-1]:.2f} | MACD: {df['MACD'].iloc[-1]:.6f} | Signal: {df['MACD_SIGNAL'].iloc[-1]:.6f}\n\n"
            f"‚û°Ô∏è –°–∏–≥–Ω–∞–ª: {signal}"
        )
        await context.bot.send_message(chat_id, text, reply_markup=keyboard_after_signal())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def refresh_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    settings = user_settings.get(chat_id)
    if not settings or not settings.get("pair") or not settings.get("tf"):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º —á–µ—Ä–µ–∑ /start", reply_markup=keyboard_pairs())
        return
    await update.message.reply_text(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–∏–≥–Ω–∞–ª –¥–ª—è {settings['pair']} ({settings['tf']}) ...")
    await send_signal_for_user(chat_id, update, context)


# ---------- MAIN ----------
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("Bot started")
    application.run_polling()


if __name__ == "__main__":
    main()

# bot.py
import os
import time
import threading
import schedule
import logging

import pandas as pd
import numpy as np
import ta
from binance.client import Client
from binance.exceptions import BinanceAPIException
import telebot
from telebot import types

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–∏–∑ Railway / .env) ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY", "")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET", "")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN env var is missing")

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ----------
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=True)
# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª—é—á–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å) ----------
PAIRS = ["BTCUSDT","ETHUSDT","XRPUSDT","MATICUSDT","ADAUSDT","DOGEUSDT","SOLUSDT","TRXUSDT","SUIUSDT"]
TIMEFRAMES = ["15m","30m","1h","4h","1d"]

CHECK_INTERVAL_MINUTES = 15  # –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
RESEND_COOLDOWN_SECONDS = 60 * 60  # –Ω–µ —Å–ª–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å–∏–≥–Ω–∞–ª —á–∞—â–µ, —á–µ–º 60 –º–∏–Ω—É—Ç

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
RSI_BUY_THRESH = 30
RSI_SELL_THRESH = 70
VOL_MULTIPLIER = 1.2  # –æ–±—ä—ë–º > —Å—Ä–µ–¥–Ω–∏–π * VOL_MULTIPLIER
TP_PCT = 0.03  # —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (3%)
SL_PCT = 0.015  # —Å—Ç–æ–ø-–ª–æ—Å—Å (1.5%)

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏) ----------
# user_settings: chat_id -> {"pair": str or None, "tf": str, "monitor_all": bool}
user_settings = {}
# sent_cache: (chat_id, pair, tf, signal_type) -> last_sent_timestamp
sent_cache = {}

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def get_klines(symbol: str, interval: str, limit: int = 200):
    """–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (public) —á–µ—Ä–µ–∑ python-binance. –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ time,o,h,l,c,v"""
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
        df = pd.DataFrame(klines, columns=["time","o","h","l","c","v","ct","qav","n","tbbav","tbqav","ignore"])
        df["c"] = df["c"].astype(float)
        df["o"] = df["o"].astype(float)
        df["h"] = df["h"].astype(float)
        df["l"] = df["l"].astype(float)
        df["v"] = df["v"].astype(float)
        return df
    except BinanceAPIException as e:
        logger.exception("Binance API exception")
        raise
    except Exception as e:
        logger.exception("get_klines error")
        raise

def analyze_df(df: pd.DataFrame):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º + —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None"""
    if df is None or df.empty or len(df) < 50:
        return {"error": "Not enough data"}

    # EMA
    df["ema_fast"] = df["c"].ewm(span=9, adjust=False).mean()
    df["ema_slow"] = df["c"].ewm(span=21, adjust=False).mean()
    df["ema200"] = df["c"].ewm(span=200, adjust=False).mean()

    # RSI
    delta = df["c"].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(14).mean()
    avg_loss = loss.rolling(14).mean()
    rs = avg_gain / avg_loss
    df["rsi"] = 100 - (100 / (1 + rs))

    # MACD
    ema12 = df["c"].ewm(span=12, adjust=False).mean()
    ema26 = df["c"].ewm(span=26, adjust=False).mean()
    df["macd"] = ema12 - ema26
    df["macd_signal"] = df["macd"].ewm(span=9, adjust=False).mean()

    # Volume
    avg_vol = df["v"].tail(50).mean() if len(df) >= 50 else df["v"].mean()
    last = df.iloc[-1]

    res = {
        "price": float(last["c"]),
        "ema_fast": float(last["ema_fast"]),
        "ema_slow": float(last["ema_slow"]),
        "ema200": float(last["ema200"]),
        "rsi": float(last["rsi"]) if not np.isnan(last["rsi"]) else None,
        "macd": float(last["macd"]),
        "macd_signal": float(last["macd_signal"]),
        "last_vol": float(last["v"]),
        "avg_vol": float(avg_vol)
    }

    # –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∂–µ—Å—Ç–∫–∞—è: –≤—Å–µ —É—Å–ª–æ–≤–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç)
    signal = None
    # BUY —É—Å–ª–æ–≤–∏–µ
    if (res["ema_fast"] > res["ema_slow"]
        and (res["rsi"] is not None and res["rsi"] <= RSI_BUY_THRESH)
        and res["macd"] > res["macd_signal"]
        and res["last_vol"] > max(1e-9, res["avg_vol"] * VOL_MULTIPLIER)):
        signal = "BUY"
    # SELL —É—Å–ª–æ–≤–∏–µ
    elif (res["ema_fast"] < res["ema_slow"]
          and (res["rsi"] is not None and res["rsi"] >= RSI_SELL_THRESH)
          and res["macd"] < res["macd_signal"]
          and res["last_vol"] > max(1e-9, res["avg_vol"] * VOL_MULTIPLIER)):
        signal = "SELL"

    res["signal"] = signal
    # TP/SL
    if signal == "BUY":
        res["tp"] = res["price"] * (1 + TP_PCT)
        res["sl"] = res["price"] * (1 - SL_PCT)
    elif signal == "SELL":
        res["tp"] = res["price"] * (1 - TP_PCT)
        res["sl"] = res["price"] * (1 + SL_PCT)
    else:
        res["tp"] = None
        res["sl"] = None

    return res

def format_signal_message(pair, tf, info):
    if "error" in info:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {info['error']}"
    price = info["price"]
    s = info["signal"]
    if not s:
        return None
    tp = info["tp"]
    sl = info["sl"]
    return (f"üîî <b>{s} ‚Äî {pair} ({tf})</b>\n"
            f"–¶–µ–Ω–∞: {price:.8f}\n"
            f"EMA9: {info['ema_fast']:.6f} | EMA21: {info['ema_slow']:.6f} | EMA200: {info['ema200']:.6f}\n"
            f"RSI: {info['rsi']:.2f} | MACD: {info['macd']:.6f}\n"
            f"–û–±—ä—ë–º: {info['last_vol']:.2f} (avg {info['avg_vol']:.2f})\n\n"
            f"üéØ TP: {tp:.8f}\n"
            f"üõë SL: {sl:.8f}")

def can_send(chat_id, pair, tf, signal):
    key = (chat_id, pair, tf, signal)
    now = time.time()
    last = sent_cache.get(key, 0)
    if now - last > RESEND_COOLDOWN_SECONDS:
        sent_cache[key] = now
        return True
    return False

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_pairs():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for p in PAIRS:
        markup.add(types.KeyboardButton(p))
    markup.add(types.KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"), types.KeyboardButton("‚è± –°–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º"))
    markup.add(types.KeyboardButton("üåê –í–∫–ª. –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä"), types.KeyboardButton("üõë –í—ã–∫–ª. –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä"))
    return markup

def kb_timeframes():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for t in TIMEFRAMES:
        markup.add(types.KeyboardButton(t))
    return markup

def kb_after_signal():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª"), types.KeyboardButton("üìå –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É"))
    markup.add(types.KeyboardButton("‚è± –°–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º"))
    markup.add(types.KeyboardButton("üåê –í–∫–ª. –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä"), types.KeyboardButton("üõë –í—ã–∫–ª. –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä"))
    return markup

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_settings[chat_id] = {"pair": None, "tf": "1h", "monitor_all": False}
    bot.send_message(chat_id, "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=kb_pairs())

@bot.message_handler(func=lambda m: m.text == "üìå –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É")
def handle_change_pair(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=kb_pairs())

@bot.message_handler(func=lambda m: m.text == "‚è± –°–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º")
def handle_change_tf(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=kb_timeframes())

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
def handle_refresh(message):
    chat_id = message.chat.id
    settings = user_settings.get(chat_id)
    if not settings or not settings.get("pair"):
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É —á–µ—Ä–µ–∑ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=kb_pairs())
        return
    pair = settings["pair"]
    tf = settings["tf"]
    bot.send_message(chat_id, f"üîé –û–±–Ω–æ–≤–ª—è—é —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({tf}) ...")
    try:
        df = get_klines(pair, tf, limit=200)
        info = analyze_df(df)
        text = format_signal_message(pair, tf, info)
        if text:
            bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=kb_after_signal())
        else:
            bot.send_message(chat_id, f"‚è∏ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair} ({tf}).", reply_markup=kb_after_signal())
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

@bot.message_handler(func=lambda m: m.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã")
def handle_manual_check_all(message):
    chat_id = message.chat.id
    settings = user_settings.get(chat_id, {"tf":"1h"})
    tf = settings.get("tf", "1h")
    bot.send_message(chat_id, f"üîé –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä –Ω–∞ {tf} ...")
    for pair in PAIRS:
        try:
            df = get_klines(pair, tf, limit=200)
            info = analyze_df(df)
            text = format_signal_message(pair, tf, info)
            if text:
                bot.send_message(chat_id, text, parse_mode="HTML")
            time.sleep(0.5)  # –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
        except Exception as e:
            logger.exception("manual check error")
    bot.send_message(chat_id, "‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=kb_after_signal())

@bot.message_handler(func=lambda m: m.text == "üåê –í–∫–ª. –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä")
def handle_enable_global(message):
    chat_id = message.chat.id
    settings = user_settings.setdefault(chat_id, {"pair": None, "tf": "1h", "monitor_all": False})
    settings["monitor_all"] = True
    bot.send_message(chat_id, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä –≤–∫–ª—é—á—ë–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ª—é–±—ã—Ö –ø–∞—Ä.", reply_markup=kb_after_signal())

@bot.message_handler(func=lambda m: m.text == "üõë –í—ã–∫–ª. –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä")
def handle_disable_global(message):
    chat_id = message.chat.id
    settings = user_settings.setdefault(chat_id, {"pair": None, "tf": "1h", "monitor_all": False})
    settings["monitor_all"] = False
    bot.send_message(chat_id, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–∞—Ä –≤—ã–∫–ª—é—á–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ.", reply_markup=kb_after_signal())

@bot.message_handler(func=lambda m: m.text in TIMEFRAMES)
def handle_set_tf(message):
    chat_id = message.chat.id
    tf = message.text
    settings = user_settings.setdefault(chat_id, {"pair": None, "tf": "1h", "monitor_all": False})
    settings["tf"] = tf
    bot.send_message(chat_id, f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tf}", reply_markup=kb_after_signal())

@bot.message_handler(func=lambda m: m.text in PAIRS)
def handle_set_pair(message):
    chat_id = message.chat.id
    pair = message.text.strip().upper()
    settings = user_settings.setdefault(chat_id, {"pair": None, "tf": "1h", "monitor_all": False})
    settings["pair"] = pair
    bot.send_message(chat_id, f"‚úÖ –ü–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {pair}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=kb_timeframes())

@bot.message_handler(func=lambda m: True)
def handle_unknown(message):
    bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb_pairs())

# ---------- –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ (scheduler) ----------
def auto_check_for_user(chat_id, settings):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–∞—Ä—ã (–µ—Å–ª–∏ monitor_all) –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã."""
    tf = settings.get("tf", "1h")
    monitor_all = settings.get("monitor_all", False)
    pairs_to_check = PAIRS if monitor_all else ([settings.get("pair")] if settings.get("pair") else [])
    if not pairs_to_check:
        return

    for pair in pairs_to_check:
        if not pair:
            continue
        try:
            df = get_klines(pair, tf, limit=200)
            info = analyze_df(df)
            text = format_signal_message(pair, tf, info)
            if text and info.get("signal"):
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ cooldown
                if can_send(chat_id, pair, tf, info["signal"]):
                    bot.send_message(chat_id, text, parse_mode="HTML")
            time.sleep(0.6)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except Exception as e:
            logger.exception("auto_check_for_user error")

def auto_check_all_users():
    logger.info("Scheduler: –∑–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    for chat_id, settings in list(user_settings.items()):
        try:
            auto_check_for_user(chat_id, settings)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ auto_check_all_users")

def run_scheduler():
    schedule.every(CHECK_INTERVAL_MINUTES).minutes.do(auto_check_all_users)
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    time.sleep(5)
    auto_check_all_users()
    while True:
        schedule.run_pending()
        time.sleep(1)

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    # —Å—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    t = threading.Thread(target=run_scheduler, daemon=True)
    t.start()
    # —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ (–ø—É–ª–ª–∏–Ω–≥)
    bot.infinity_polling(timeout=60, long_polling_timeout=60)
